import{_ as t}from"./plugin-vue_export-helper.21dcd24c.js";import{o as e,c as p,a as n,b as o,d as s,h as c,r as l}from"./app.34473693.js";const i={},u={id:"\u9898\u76EE\u94FE\u63A5-\u53CD\u8F6C\u5B57\u7B26\u4E32\u4E2D\u7684\u5355\u8BCD",tabindex:"-1"},r=n("a",{class:"header-anchor",href:"#\u9898\u76EE\u94FE\u63A5-\u53CD\u8F6C\u5B57\u7B26\u4E32\u4E2D\u7684\u5355\u8BCD","aria-hidden":"true"},"#",-1),d=s(" \u9898\u76EE\u94FE\u63A5\uFF1A"),k={href:"https://leetcode.cn/problems/reverse-words-in-a-string/description/",target:"_blank",rel:"noopener noreferrer"},v=s("\u53CD\u8F6C\u5B57\u7B26\u4E32\u4E2D\u7684\u5355\u8BCD"),m=c(`<table><thead><tr><th style="text-align:center;">Category</th><th style="text-align:center;">Difficulty</th><th style="text-align:center;">Likes</th><th style="text-align:center;">Dislikes</th></tr></thead><tbody><tr><td style="text-align:center;">algorithms</td><td style="text-align:center;">Medium (50.89%)</td><td style="text-align:center;">667</td><td style="text-align:center;">-</td></tr></tbody></table><p>\u7ED9\u4F60\u4E00\u4E2A\u5B57\u7B26\u4E32 <code>s</code> \uFF0C\u8BF7\u4F60\u53CD\u8F6C\u5B57\u7B26\u4E32\u4E2D <strong>\u5355\u8BCD</strong> \u7684\u987A\u5E8F\u3002</p><p><strong>\u5355\u8BCD</strong> \u662F\u7531\u975E\u7A7A\u683C\u5B57\u7B26\u7EC4\u6210\u7684\u5B57\u7B26\u4E32\u3002<code>s</code> \u4E2D\u4F7F\u7528\u81F3\u5C11\u4E00\u4E2A\u7A7A\u683C\u5C06\u5B57\u7B26\u4E32\u4E2D\u7684 <strong>\u5355\u8BCD</strong> \u5206\u9694\u5F00\u3002</p><p>\u8FD4\u56DE <strong>\u5355\u8BCD</strong> \u987A\u5E8F\u98A0\u5012\u4E14 <strong>\u5355\u8BCD</strong> \u4E4B\u95F4\u7528\u5355\u4E2A\u7A7A\u683C\u8FDE\u63A5\u7684\u7ED3\u679C\u5B57\u7B26\u4E32\u3002</p><p>**\u6CE8\u610F\uFF1A**\u8F93\u5165\u5B57\u7B26\u4E32 <code>s</code>\u4E2D\u53EF\u80FD\u4F1A\u5B58\u5728\u524D\u5BFC\u7A7A\u683C\u3001\u5C3E\u968F\u7A7A\u683C\u6216\u8005\u5355\u8BCD\u95F4\u7684\u591A\u4E2A\u7A7A\u683C\u3002\u8FD4\u56DE\u7684\u7ED3\u679C\u5B57\u7B26\u4E32\u4E2D\uFF0C\u5355\u8BCD\u95F4\u5E94\u5F53\u4EC5\u7528\u5355\u4E2A\u7A7A\u683C\u5206\u9694\uFF0C\u4E14\u4E0D\u5305\u542B\u4EFB\u4F55\u989D\u5916\u7684\u7A7A\u683C\u3002</p><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1As = &quot;the sky is blue&quot;
\u8F93\u51FA\uFF1A&quot;blue is sky the&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 2\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1As = &quot;  hello world  &quot;
\u8F93\u51FA\uFF1A&quot;world hello&quot;
\u89E3\u91CA\uFF1A\u53CD\u8F6C\u540E\u7684\u5B57\u7B26\u4E32\u4E2D\u4E0D\u80FD\u5B58\u5728\u524D\u5BFC\u7A7A\u683C\u548C\u5C3E\u968F\u7A7A\u683C\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 3\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1As = &quot;a good   example&quot;
\u8F93\u51FA\uFF1A&quot;example good a&quot;
\u89E3\u91CA\uFF1A\u5982\u679C\u4E24\u4E2A\u5355\u8BCD\u95F4\u6709\u591A\u4F59\u7684\u7A7A\u683C\uFF0C\u53CD\u8F6C\u540E\u7684\u5B57\u7B26\u4E32\u9700\u8981\u5C06\u5355\u8BCD\u95F4\u7684\u7A7A\u683C\u51CF\u5C11\u5230\u4EC5\u6709\u4E00\u4E2A\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u63D0\u793A\uFF1A</strong></p><ul><li><code>1 &lt;= s.length &lt;= 104</code></li><li><code>s</code> \u5305\u542B\u82F1\u6587\u5927\u5C0F\u5199\u5B57\u6BCD\u3001\u6570\u5B57\u548C\u7A7A\u683C <code>&#39; &#39;</code></li><li><code>s</code> \u4E2D <strong>\u81F3\u5C11\u5B58\u5728\u4E00\u4E2A</strong> \u5355\u8BCD</li></ul><p>**\u8FDB\u9636\uFF1A**\u5982\u679C\u5B57\u7B26\u4E32\u5728\u4F60\u4F7F\u7528\u7684\u7F16\u7A0B\u8BED\u8A00\u4E2D\u662F\u4E00\u79CD\u53EF\u53D8\u6570\u636E\u7C7B\u578B\uFF0C\u8BF7\u5C1D\u8BD5\u4F7F\u7528 <code>O(1)</code> \u989D\u5916\u7A7A\u95F4\u590D\u6742\u5EA6\u7684 <strong>\u539F\u5730</strong> \u89E3\u6CD5\u3002</p><h2 id="\u601D\u8DEF" tabindex="-1"><a class="header-anchor" href="#\u601D\u8DEF" aria-hidden="true">#</a> \u601D\u8DEF</h2><p>\u6839\u636E\u9898\u610F\u6765\u5206\u4E09\u6B65\u8D70\uFF0C\u9996\u5148\u53BB\u9664\u9996\u5C3E\u4EE5\u53CA\u4E2D\u95F4\u90E8\u5206\u591A\u4F59\u7684\u7A7A\u683C\uFF0C\u7136\u540E\u7FFB\u8F6C\u6574\u4E2A\u5B57\u7B26\u4E32\uFF0C\u6700\u540E\u5206\u522B\u7FFB\u8F6C\u6BCF\u4E00\u4E2A\u5355\u8BCD\uFF0C\u8BE6\u7EC6\u8FC7\u7A0B\u89C1\u4EE3\u7801</p><h2 id="\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801" aria-hidden="true">#</a> \u4EE3\u7801</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * \u4E0D\u4F7F\u7528Java\u5185\u7F6E\u65B9\u6CD5\u5B9E\u73B0
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 1.\u53BB\u9664\u9996\u5C3E\u4EE5\u53CA\u4E2D\u95F4\u591A\u4F59\u7A7A\u683C
     * 2.\u53CD\u8F6C\u6574\u4E2A\u5B57\u7B26\u4E32
     * 3.\u53CD\u8F6C\u5404\u4E2A\u5355\u8BCD
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// System.out.println(&quot;ReverseWords.reverseWords2() called with: s = [&quot; + s + &quot;]&quot;);</span>
        <span class="token comment">// 1.\u53BB\u9664\u9996\u5C3E\u4EE5\u53CA\u4E2D\u95F4\u591A\u4F59\u7A7A\u683C</span>
        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token function">removeSpace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.\u53CD\u8F6C\u6574\u4E2A\u5B57\u7B26\u4E32</span>
        <span class="token function">reverseString</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.\u53CD\u8F6C\u5404\u4E2A\u5355\u8BCD</span>
        <span class="token function">reverseEachWord</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">StringBuilder</span> <span class="token function">removeSpace</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// System.out.println(&quot;ReverseWords.removeSpace() called with: s = [&quot; + s + &quot;]&quot;);</span>
        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> end <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span>
            start<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span>
            end<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token char">&#39; &#39;</span> <span class="token operator">||</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            start<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// System.out.println(&quot;ReverseWords.removeSpace returned: sb = [&quot; + sb + &quot;]&quot;);</span>
        <span class="token keyword">return</span> sb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * \u53CD\u8F6C\u5B57\u7B26\u4E32\u6307\u5B9A\u533A\u95F4[start, end]\u7684\u5B57\u7B26
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> sb<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// System.out.println(&quot;ReverseWords.reverseString() called with: sb = [&quot; + sb +</span>
        <span class="token comment">// &quot;], start = [&quot; + start + &quot;], end = [&quot; + end + &quot;]&quot;);</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> temp <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sb<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sb<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            start<span class="token operator">++</span><span class="token punctuation">;</span>
            end<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// System.out.println(&quot;ReverseWords.reverseString returned: sb = [&quot; + sb + &quot;]&quot;);</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reverseEachWord</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> sb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                end<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">reverseString</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            start <span class="token operator">=</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            end <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18);function b(h,g){const a=l("ExternalLinkIcon");return e(),p("div",null,[n("h2",u,[r,d,n("a",k,[v,o(a)])]),m])}var w=t(i,[["render",b],["__file","151. \u53CD\u8F6C\u5B57\u7B26\u4E32\u4E2D\u7684\u5355\u8BCD.html.vue"]]);export{w as default};
